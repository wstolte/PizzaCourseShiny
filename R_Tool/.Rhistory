samples <- map_chr(statlist, "locname") ## get all sample codes
udf_prep <- statlist %>%
set_names(samples) %>%
enframe("locname", "statlist")
udf_stats <- udf_prep %>%
mutate(#locatiecode = map_chr(statlist, "loccode"),
#reftype     = map_chr(statlist, "reftype"),
#xcoor       = map_dbl(statlist, "locX"),
#ycoor       = map_dbl(statlist, "locY"),
#type        = "oeverplanten",
soortgroep   = sg,
stats        = map(statlist, c(8))) %>%
select(-statlist) %>%
tidyr::unnest()
udf_stats
udf_stats <- udf_prep %>%
mutate(#locatiecode = map_chr(statlist, "loccode"),
#reftype     = map_chr(statlist, "reftype"),
#xcoor       = map_dbl(statlist, "locX"),
#ycoor       = map_dbl(statlist, "locY"),
#type        = "oeverplanten",
soortgroep   = sg,
stats        = map(statlist, c(9, 1))) %>%
select(-statlist) %>%
tidyr::unnest()
udf_stats
udf_return <- melt(udf_stats,
id.vars = c("locname", "soortgroep", "Statistiek"),
variable.name = "parameter",
value.name = "waarde")
runApp()
soortgroep    <- "Diatomeeen"
soortgroepnaam = c("DIATM", "DIAB", "Diatomeeen")
path_Dawaco <- paste("testdata/Dawaco WSRL Diatom alles tm 2018.txt", sep = "") ## test hoe inlezenDawaco omgaat met andere soortgroepen
monsterlist   <- inlezenDawaco(path_Dawaco, soortgroep, soortgroepnaam)
controlelist  <- ControleMonsterData(monsterlist[[1]])
vertaallist   <- VertaalSoorten(controlelist[[1]], soortgroep, "data\\")
abiotieklist  <- BerekenAbiotiek(vertaallist[[1]],soortgroep,"data\\")
statistieklist_samp <- BerekenenStatistiekWaarden(abiotieklist[[1]],soortgroep)
path_Doelsoorten = paste("testdata/test_doelsoorten_diatomeeen.xlsx", sep = "")
soortgroep    <- "Diatomeeen"
soortgroepnaam = c("DIATM", "DIAB", "Diatomeeen")
monsterlist_doel    <- inlezenDoelsoorten(path_Doelsoorten, soortgroep, soortgroepnaam)
controlelist_doel   <- ControleDoelsoortData(monsterlist_doel[[1]])
vertaallist_doel    <- VertaalSoorten(controlelist_doel[[1]], soortgroep, "data\\")
abiotieklist_doel   <- BerekenAbiotiek(vertaallist_doel[[1]], soortgroep,"data\\")
statistieklist_doel <- BerekenenStatistiekWaarden(abiotieklist_doel[[1]], soortgroep)
matched = MatchMonsterReferentie(statistieklist_samp[[1]], statistieklist_doel[[1]])
zwaarden = BerekenZWaarden(matched[[1]])
df.plotz <- bereidZplotData(zwaarden)
df.plotz2 <- groepeerZplotData(df.plotz, sg = "Macrofyten", wt = "stilstaand")
df.plotz2 <- groepeerZplotData(df.plotz, sg = "Diatomeeem", wt = "stilstaand")
df.plotz2 <- groepeerZplotData(df.plotz, sg = "Diatomeeen", wt = "stilstaand")
df.plotz2
zdf <- df.plotz2
jaar <- 2007
locaties <- "ALBL0002"
plotstijl <- theme(
# axis.text = element_blank(),
axis.title = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.text.align = 0,
axis.line = element_blank(),
strip.text = element_text(size = 12),
axis.text = element_text(size = 12),
axis.ticks = element_blank())
cols <- c("Te hoog" = "salmon1",
"Hoog" = "khaki2",
"Geen afwijking" = "darkseagreen1",
"Laag" = "paleturquoise1",
"Te laag" = "skyblue2",
"Niet bekend" = "grey")
subdf <- zdf %>%
filter(jaar == jaartal) %>%
filter(soorttype == ptype)
jaartal <- 2007
subdf <- zdf %>%
filter(jaar == jaartal) %>%
filter(soorttype == ptype)
ptype <- "Diatomeeen"
subdf <- zdf %>%
filter(jaar == jaartal) %>%
filter(soorttype == ptype)
if(!is.null(locaties)){
subdf <- subdf %>% filter(locname %in% locaties)  # of loccode
}
subdf$klasse <- as.factor(as.character(subdf$klasse))
subdf$klasse
subdf$klasse <- factor(subdf$klasse, levels = c("Te hoog", "Hoog", "Geen afwijking", "Laag", "Te laag", "Niet bekend"))
if(ptype %in% c("oeverplanten", "Diatomeeen", "Macrofauna", "Macrofauna_V2", "Vissen")){
plot_label <- c(expression("Te hoog (">="1.0)"), "Hoog (0.5 - 1.0)", "Geen afwijking (-0.5 - 0.5)", "Laag (-1 - -0.5)", expression("Te laag ("<="-1.0)"))
}
if(ptype %in% c("waterplanten")){
plot_label <- c(expression("Te hoog (">="0.75)"), "Hoog (0.5 - 0.75)", "Geen afwijking (-0.5 - 0.5)", "Laag (-0.75 - -0.5)", expression("Te laag ("<="-0.75)"))
}
p <- subdf %>%
ggplot(aes(x = locname, y = Parameter, z = Zwaarde)) +
geom_tile(aes(fill = klasse)) +
geom_text(aes(label = round(Zwaarde,2)), size = 4.5) +
scale_fill_manual(values = cols, name = "Klasse",
labels = plot_label) +
#facet_grid(parametergroep~., scales = "free_y", space = "free_y", strip.position = C("top"))
facet_wrap("parametergroep", ncol = 1, scales = "free_y")
p <- p + plotstijl
p
cols <- c("Te hoog" = "salmon1",
"Hoog" = "khaki2",
"Geen afwijking" = "darkseagreen1",
"Laag" = "paleturquoise1",
"Te laag" = "skyblue2",
"Niet bekend" = "grey")
cols
View(subdf)
cols
plot_label
p <- subdf %>%
ggplot(aes(x = locname, y = Parameter, z = Zwaarde)) +
geom_tile(aes(fill = klasse)) +
geom_text(aes(label = round(Zwaarde,2)), size = 4.5) +
scale_fill_manual(values = cols, name = "Klasse",
labels = plot_label, drop = FALSE) +
#facet_grid(parametergroep~., scales = "free_y", space = "free_y", strip.position = C("top"))
facet_wrap("parametergroep", ncol = 1, scales = "free_y")
p <- p + plotstijl
p
p <- subdf %>%
ggplot(aes(x = locname, y = Parameter, z = Zwaarde)) +
geom_tile(aes(fill = klasse)) +
geom_text(aes(label = round(Zwaarde,2)), size = 4.5) +
scale_fill_manual(values = cols, name = "Klasse",
labels = plot_label, drop = FALSE) +
#facet_grid(parametergroep~., scales = "free_y", space = "free_y", strip.position = C("top"))
facet_wrap("parametergroep", ncol = 1, scales = "free_y")
p <- p + plotstijl
## bereken handmatig hoe groot elke plot moet zijn
## met facet_wrap krijg je anders dat elke facet dezelfde grootte is wordt
## facet_grid is onhandig omdat de titels van de facets dan alleen aan de zijkant weergegeven kunnen worden
library(plyr)
N = dlply(subdf, .(parametergroep), function(x) length(row.names(x)))
g1 = ggplotGrob(p)
panels1 <- g1$layout$t[grepl("panel", g1$layout$name)]
g1$heights[panels1] <- unit(N, "null")
library(grid)
grid.newpage()
grid.draw(g1)
return(g1)
plotstijl <- theme(
# axis.text = element_blank(),
axis.title = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.text.align = 0,
axis.line = element_blank(),
strip.text = element_text(size = 12),
axis.text = element_text(size = 12),
axis.ticks = element_blank())
cols <- c("Te hoog" = "salmon1",
"Hoog" = "khaki2",
"Geen afwijking" = "darkseagreen1",
"Laag" = "paleturquoise1",
"Te laag" = "skyblue2",
"Niet bekend" = "grey")
subdf <- zdf %>%
filter(jaar == jaartal) %>%
filter(soorttype == ptype)
if(!is.null(locaties)){
subdf <- subdf %>% filter(locname %in% locaties)  # of loccode
}
subdf$klasse <- as.factor(as.character(subdf$klasse))
subdf$klasse <- factor(subdf$klasse, levels = c("Te hoog", "Hoog", "Geen afwijking", "Laag", "Te laag", "Niet bekend"))
if(ptype %in% c("oeverplanten", "Diatomeeen", "Macrofauna", "Macrofauna_V2", "Vissen")){
plot_label <- c(expression("Te hoog (">="1.0)"), "Hoog (0.5 - 1.0)", "Geen afwijking (-0.5 - 0.5)", "Laag (-1 - -0.5)", expression("Te laag ("<="-1.0)", "Niet bekend"))
}
if(ptype %in% c("waterplanten")){
plot_label <- c(expression("Te hoog (">="0.75)"), "Hoog (0.5 - 0.75)", "Geen afwijking (-0.5 - 0.5)", "Laag (-0.75 - -0.5)", expression("Te laag ("<="-0.75)", "Niet bekend"))
}
p <- subdf %>%
ggplot(aes(x = locname, y = Parameter, z = Zwaarde)) +
geom_tile(aes(fill = klasse)) +
geom_text(aes(label = round(Zwaarde,2)), size = 4.5) +
scale_fill_manual(values = cols, name = "Klasse",
labels = plot_label, drop = FALSE) +
#facet_grid(parametergroep~., scales = "free_y", space = "free_y", strip.position = C("top"))
facet_wrap("parametergroep", ncol = 1, scales = "free_y")
p <- p + plotstijl
p
runApp()
runApp()
df <- zdf %>%
filter(Parameter == zpar) %>%
filter(zjaar == jaar) %>%
filter(soorttype == ptype) # %>%
zpar <- "Diepte"
df <- zdf %>%
filter(Parameter == zpar) %>%
filter(zjaar == jaar) %>%
filter(soorttype == ptype) # %>%
jaar <- 2009
df <- zdf %>%
filter(Parameter == zpar) %>%
filter(zjaar == jaar) %>%
filter(soorttype == ptype) # %>%
df <- zdf %>%
filter(Parameter == zpar) %>%
filter(jaar == zjaar) %>%
filter(soorttype == ptype) # %>%
zjaar <- 2007
df <- zdf %>%
filter(Parameter == zpar) %>%
filter(jaar == zjaar) %>%
filter(soorttype == ptype) # %>%
coordinates(df) <- (~locX+locY)
proj4string(df) <- CRS("+init=epsg:28992")
df.wgs <- spTransform(df, CRS("+proj=longlat +datum=WGS84"))
pal <- colorFactor(palette = c("lightsalmon", "khaki", "palegreen", "paleturquoise", "cornflowerblue", "gainsboro"),
levels = c("Te hoog", "Hoog", "Geen afwijking", "Laag", "Te laag", "Niet bekend"))
if(ptype %in% c("oeverplanten", "Diatomeeen", "Macrofauna", "Macrofauna_V2", "Vissen")){
plot_label <- c("Te hoog (>=1.0)", "Hoog (0.5 - 1.0)", "Geen afwijking (-0.5 - 0.5)", "Laag (-1 - -0.5)", "Te laag (<=-1.0)", "Niet bekend")
}
if(ptype %in% c("waterplanten")){
plot_label <- c("Te hoog (>= 0.75)", "Hoog (0.5 - 0.75)", "Geen afwijking (-0.5 - 0.5)", "Laag (-0.75 - -0.5)", "Te laag (<=-0.75)", "Niet bekend")
}
leaflet(df.wgs) %>%
addTiles() %>%
addCircleMarkers(color = "grey",
fill = ~pal(klasse), opacity = 1,
fillColor = ~pal(klasse),
fillOpacity = 1, weight = 1,
label = ~paste(locname, "z =", round(Zwaarde, 2))) %>%
addLegend("bottomright", colors = c("lightsalmon", "khaki", "palegreen", "paleturquoise", "cornflowerblue", "gainsboro"), values = ~klasse,
labels = plot_label,
title = "Z-waarde",
opacity = 1)
leaflet(df.wgs) %>%
addTiles('http://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png') %>%
addCircleMarkers(color = "grey",
fill = ~pal(klasse), opacity = 1,
fillColor = ~pal(klasse),
fillOpacity = 1, weight = 1,
label = ~paste(locname, "z =", round(Zwaarde, 2))) %>%
addLegend("bottomright", colors = c("lightsalmon", "khaki", "palegreen", "paleturquoise", "cornflowerblue", "gainsboro"), values = ~klasse,
labels = plot_label,
title = "Z-waarde",
opacity = 1)
runApp()
plotstijl <-
theme(
# axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
axis.line = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size = 12),
axis.text = element_text(size = 12),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(colour = "grey50"),
panel.spacing = unit(2, "lines"))
subdf <- zdf
if(!is.null(locaties)){
subdf <- subdf %>% filter(locname %in% locaties)  # of locname
}
if(!is.null(pg)){
subdf <- subdf %>% filter(parametergroep == pg)
}
pg <- "Habitatgeschiktheid"
plotstijl <-
theme(
# axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
axis.line = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size = 12),
axis.text = element_text(size = 12),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(colour = "grey50"),
panel.spacing = unit(2, "lines"))
subdf <- zdf
if(!is.null(locaties)){
subdf <- subdf %>% filter(locname %in% locaties)  # of locname
}
if(!is.null(pg)){
subdf <- subdf %>% filter(parametergroep == pg)
}
if(!is.null(ptype)){
subdf <- subdf %>% filter(soorttype == ptype)
}
library(scales)
colors <- c("Te hoog" = "salmon1",
"Hoog" = "khaki2",
"Geen afwijking" = "darkseagreen1",
"Laag" = "paleturquoise1",
"Te laag" = "skyblue2",
"Niet bekend" = "grey")
p <- subdf %>%
ggplot(aes(x = datesmp, y = Zwaarde))
if(ptype %in% c("oeverplanten", "Diatomeeen", "Macrofauna", "Macrofauna_V2", "Vissen")){
p <- p + geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = 1.0,  ymax = Inf, fill = "Te hoog"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = 0.5,  ymax = 1.0, fill = "Hoog"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = -0.5, ymax = 0.5, fill = "Geen afwijking"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = -1.0, ymax = -0.5, fill = "Laag"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = -Inf, ymax = -1.0, fill = "Te laag"), alpha = 0.75)
plot_label <- c(expression("Te hoog (">="1.0)"), "Hoog (0.5 - 1.0)", "Geen afwijking (-0.5 - 0.5)", "Laag (-1 - -0.5)", expression("Te laag ("<="-1.0)"))
}
if(ptype %in% c("waterplanten")){
p <- p + geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = 0.75,  ymax = Inf, fill = "Te hoog"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = 0.5,   ymax = 0.75, fill = "Hoog"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = -0.5,  ymax = 0.5, fill = "Geen afwijking"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = -0.75, ymax = -0.5, fill = "Laag"), alpha = 0.75) +
geom_rect(aes(xmin = min(subdf$datesmp)-(60*60*24*7), xmax = max(subdf$datesmp)+(60*60*24*7), ymin = -Inf,  ymax = -0.75, fill = "Te laag"), alpha = 0.75)
plot_label <- c(expression("Te hoog (">="0.75)"), "Hoog (0.5 - 0.75)", "Geen afwijking (-0.5 - 0.5)", "Laag (-0.75 - -0.5)", expression("Te laag ("<="-0.75)"))
}
p <- p + geom_line() +
scale_x_datetime(labels = date_format("%d-%m-%y"), expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(name = "Waarde oordeel",
values = colors,
breaks = c("Te hoog", "Hoog", "Geen afwijking", "Laag", "Te laag"),
labels = plot_label) +
geom_point(cex = 2) +
facet_grid(Parameter ~ .)
p.plot <- p + plotstijl
p.plot
plotstijl <-
theme(
# axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
axis.line = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size = 12),
axis.text = element_text(size = 12),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(colour = "grey50"),
panel.spacing = unit(0.5, "lines"))
p.plot <- p + plotstijl
p.plot
runApp()
plotstijl <-
theme(
# axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.text.align = 0,
legend.position = "right",
axis.line = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(size = 12),
axis.text = element_text(size = 12),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(colour = "grey50"),
panel.spacing = unit(2, "lines"))
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("D:/krame_lh/Documents/_Werk/Software/Subversion/Aqmad/rAqmad/")
source("AqMaD_inleesfuncties.R")
source("AqMaD_rekenkern.R")
source("AqMaD_plotFunctions.R")
path_ECOBASE_QBW = "d:/REPOS-CHECK-OUTS/AQMAD/rAqMaD/"
path_DAWACO = paste("testdata\\Visbestandsschatting 2010-2014 WSRL v6.txt", sep = "")
soortgroep = "Vissen"
soortgroepnaam = c('Vissen','VISSN')
monsterlist_samp = inlezenDawaco(path_DAWACO, soortgroep, soortgroepnaam)
monsterlist_samp
monsterlist_samp[[2]]
monsterlist_samp[[1]][[1]]
controlelist_samp = ControleMonsterData(monsterlist_samp[[1]])
vertaallist_samp = VertaalSoorten(controlelist_samp[[1]], soortgroep, "data\\")
vertaallist_samp[[1]][[1]]
vertaallist_samp[[2]]
abiotieklist_samp = BerekenAbiotiek(vertaallist_samp[[1]],soortgroep,"data\\")
abiotieklist_samp
vertaallist_samp
abiotieklist_samp = BerekenAbiotiek(vertaallist_samp[[1]],soortgroep,"data\\")
mapping_file <- paste(path_databases,"AqMaD_Indeling-parameters-in-groepen.csv", sep = "")
path_databases <- "data\\"
mapping_file <- paste(path_databases,"AqMaD_Indeling-parameters-in-groepen.csv", sep = "")
mapping_file
df_mapping_file <- read.table(mapping_file, header = T, sep = ";")
View(df_mapping_file)
database_file = paste(path_databases,"AqMaD_Vissen_v1_1_brondata_adult.csv", sep = "")
mapping = unique(df_mapping_file[df_mapping_file$soortgroep == type_data, c("kolomnaam", "parameter_koppelnaam")])
type_data == "Vissen"
mapping = unique(df_mapping_file[df_mapping_file$soortgroep == type_data, c("kolomnaam", "parameter_koppelnaam")])
type_data <- "Vissen"
mapping = unique(df_mapping_file[df_mapping_file$soortgroep == type_data, c("kolomnaam", "parameter_koppelnaam")])
mapping
Nrheaders = 6
name_colspecnames = "_Wetenschappelijke.naam___3_"
new_colnames = c(as.character(mapping$kolomnaam))
abiotic_columns = c(as.character(mapping$parameter_koppelnaam))
new_colnames
abiotic_columns = c(as.character(mapping$parameter_koppelnaam))
abiotic_columns
database_list = inlezenExcelOfCsv(database_file)
database = database_list[[1]]
results <- list()
columns_naming = apply(database[1:Nrheaders , ], 2, function(x) paste(x, sep = "", collapse = "_"))
columns_naming_cor = as.vector(sapply(columns_naming, FUN = make.names))
columns_naming_cor
abiotic_columns = as.vector(unlist(abiotic_columns))
abiotic_columns
abiotic_columns = gsub("%|-|/", ".", abiotic_columns)
abiotic_columns
for(nr in 1:length(abiotic_columns)){
if(substring(abiotic_columns[nr], 1, 1)[[1]] == "_"){
abiotic_columns[nr] = paste("X",abiotic_columns[nr], sep ="")
}
}
name_colspecnames_cor = make.names(name_colspecnames)
name_colspecnames_cor
colnames(database) <- columns_naming_cor
if(length(new_colnames) != length(abiotic_columns)){
fid = c(fid,paste("ERROR: Database kolommen en vertaling kolommen kloppen niet in het script!",
" Kijk naar het aantal kolommen. Vertaling = ",as.character(length(new_colnames)),
" , Database = ",as.character(length(abiotic_columns))," .",sep = ""))
fullsample = list()
fatal_error =  1
return(list("Data" = fullsample,"Comments" = fid,"Fatal_error" = fatal_error))
}
colspecnames_temp = which(columns_naming_cor == name_colspecnames_cor)
colspecnames_temp
if(length(colspecnames_temp) == 0){
fid = c(fid,paste("ERROR: Database kolommen kloppen niet met het script!",
" Kijk naar de taxon kolom : ",name_colspecnames,
sep = ""))
fullsample = list()
fatal_error =  1
return(list("Data" = fullsample,"Comments" = fid,"Fatal_error" = fatal_error))
}
colspecnames = colspecnames_temp[[1]]
colspecnames
columns_index = match(abiotic_columns,columns_naming_cor)
columns_index
abiotic_columns
columns_naming_cor
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
dirTEST <- paste("data/km_min_max.csv")
dirTEST
dirKM <- paste("data/km_min_max.csv")
dirDATA <- "data"
fnKM <- "km_min_max.csv"
library(shiny)
library(shinydashboard)
library(data.table)
dirDATA <- "data/"
dtKM <- fread(paste(dirDATA, fnKM))
getwd()
setwd("d:/krame_lh/Documents/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool")
dirDATA <- "data/"
fnKM <- "km_min_max.csv"
dtKM <- fread(paste(dirDATA, fnKM))
dtKM <- fread(paste(dirDATA, fnKM, sep = ""))
dtKM
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
inlezen("test/testbestand.csv")
fread("test/testbestand.csv")
x <- inlezen("test/testbestand.csv")
x
runApp('~/_Werk/Software/Subversion/KRW_Tool_Waterplanten_Rijn/R_Tool')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
